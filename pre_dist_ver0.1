{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# predecessor_dist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Class Project는 불변\n",
    "#Class Schedule은 변경"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>code</th>\n",
       "      <th>predecessor_dist</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M00009</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M00001</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M00007</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>T10010</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>T10020</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     code  predecessor_dist\n",
       "0  M00009                10\n",
       "1  M00001                 0\n",
       "2  M00007                 0\n",
       "3  T10010                 3\n",
       "4  T10020                 3"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from naviutil import NaviPath\n",
    "navipath = NaviPath()\n",
    "\n",
    "activity_pre_dist = pd.read_excel(navipath.activity_pre_dist)\n",
    "\n",
    "activity_pre_dist.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### loading activity dist template and making dic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'M00009': 10, 'M00001': 0, 'M00007': 0, 'T10010': 3, 'T10020': 3, 'T10030': 3, 'T10040': 3, 'T10050': 3, 'T10060': 3, 'T10070': 3, 'T10080': 3, 'T10090': 3, 'T30010': 1, 'T30020': 1, 'T30030': 1, 'T30031': 1, 'T30032': 1, 'T30033': 1, 'T30034': 1, 'T30035': 1, 'T30036': 1, 'T30040': 1, 'T30050': 1, 'T32010': 1, 'T32020': 1, 'T35010': 1, 'T35020': 1, 'T35030': 1, 'T35031': 1, 'T35032': 1, 'T35033': 1, 'T35034': 1, 'T35035': 1, 'T35036': 1, 'T35040': 1, 'T35050': 1, 'T37010': 1, 'W10010': 5, 'W10020': 3, 'W10030': 2, 'W10040': 1, 'W10050': 1, 'W10060': 1, 'W10070': 1, 'W11010': 5, 'W11020': 1, 'W11030': 1, 'W11040': 1, 'D10010': 2, 'D10020': 0, 'D10030': 0, 'D11010': 3, 'D12010': 3, 'D12020': 3, 'R10010': 5, 'R10020': 3, 'R11010': 3, 'R11020': 3, 'R11030': 3, 'R12010': 5, 'R12020': 1, 'F20010': 2, 'F20020': 3, 'F20030': 2, 'F20040': 2, 'F20050': 3, 'F20051': 0, 'F20060': 2, 'F20070': 3, 'S10010': 3, 'S10020': 2, 'S10030': 1, 'S10040': 2, 'S10050': 3, 'S10060': 3, 'S10061': 0, 'S10070': 3, 'S11010': 2, 'S11020': 2, 'S11030': 1, 'S11040': 3, 'S11050': 3, 'S11051': 0, 'S11060': 3, 'A41510': 3, 'A44510': 3, 'A44520': 3, 'A44521': 3, 'A45010': 3, 'A45011': 3, 'A45012': 3, 'A48510': 3, 'A48520': 3, 'A48530': 3, 'A50510': 3, 'A50520': 3, 'A51010': 3, 'A52010': 3, 'A53010': 3, 'A53020': 3, 'A55010': 3, 'A57510': 3, 'A57520': 3, 'A57530': 3, 'A58010': 3, 'A59010': 3, 'A59020': 3, 'A59030': 3, 'A59510': 3, 'A60510': 3, 'A60520': 3, 'A60530': 3, 'A61010': 3, 'A61020': 3, 'A62510': 3, 'A64010': 3, 'A60020': 3, 'A67010': 3, 'A41810': 3, 'A43010': 3, 'A43020': 3, 'A43021': 3, 'A43022': 3, 'A45510': 3, 'A45520': 3, 'A61510': 3, 'A61520': 3, 'A61530': 3, 'A61540': 3, 'A66510': 3, 'A46010': 3, 'A46020': 3, 'A53510': 3, 'A53520': 3, 'A54510': 3, 'A54520': 3, 'A54530': 3, 'A62010': 3, 'A62020': 3, 'A62030': 3, 'A62040': 3, 'A62050': 3, 'A63010': 3, 'A63020': 3, 'A49510': 3, 'A49520': 3, 'A49530': 3, 'A49540': 3, 'A56510': 3, 'A56520': 3, 'A57010': 3, 'A60010': 3, 'A60710': 3, 'A60720': 3, 'A66010': 3, 'A52510': 3, 'A52520': 3, 'A52530': 3, 'A54010': 3, 'A54020': 3, 'A54030': 3, 'A47510': 3, 'A47520': 3, 'A47530': 3, 'A51510': 3, 'A51520': 3, 'A51530': 3}\n"
     ]
    }
   ],
   "source": [
    "activity_pre_dist_dic = {}\n",
    "for _, line in activity_pre_dist.iterrows():\n",
    "#    print(line)\n",
    "    \n",
    "#    print(line['code'])\n",
    "#    print(line['predecessor_dist'])\n",
    "    activity_pre_dist_dic[line['code']] = line['predecessor_dist']\n",
    "\n",
    "activity_pre_dist_dic\n",
    "print(activity_pre_dist_dic)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loading updated schedule"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'D:/cns/navi-master/navi/schedule/schedule_N-05_structure_C-updated_I-062.xlsx'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-4-69afbd8a7adb>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mschedule\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_excel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'D:/cns/navi-master/navi/schedule/schedule_N-05_structure_C-updated_I-062.xlsx'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mschedule\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\io\\excel\\_base.py\u001b[0m in \u001b[0;36mread_excel\u001b[1;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, keep_default_na, verbose, parse_dates, date_parser, thousands, comment, skipfooter, convert_float, mangle_dupe_cols, **kwds)\u001b[0m\n\u001b[0;32m    302\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    303\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mio\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 304\u001b[1;33m         \u001b[0mio\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mExcelFile\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mio\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mengine\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    305\u001b[0m     \u001b[1;32melif\u001b[0m \u001b[0mengine\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mengine\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[0mio\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    306\u001b[0m         raise ValueError(\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\io\\excel\\_base.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, io, engine)\u001b[0m\n\u001b[0;32m    822\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_io\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mstringify_path\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mio\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    823\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 824\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_engines\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_io\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    825\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    826\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__fspath__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\io\\excel\\_xlrd.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[0;32m     19\u001b[0m         \u001b[0merr_msg\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"Install xlrd >= 1.0.0 for Excel support\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     20\u001b[0m         \u001b[0mimport_optional_dependency\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"xlrd\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mextra\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0merr_msg\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 21\u001b[1;33m         \u001b[0msuper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     22\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     23\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\io\\excel\\_base.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[0;32m    351\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    352\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 353\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    354\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mbytes\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    355\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbook\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\io\\excel\\_xlrd.py\u001b[0m in \u001b[0;36mload_workbook\u001b[1;34m(self, filepath_or_buffer)\u001b[0m\n\u001b[0;32m     34\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mopen_workbook\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfile_contents\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     35\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 36\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mopen_workbook\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     37\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     38\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\xlrd\\__init__.py\u001b[0m in \u001b[0;36mopen_workbook\u001b[1;34m(filename, logfile, verbosity, use_mmap, file_contents, encoding_override, formatting_info, on_demand, ragged_rows)\u001b[0m\n\u001b[0;32m    109\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    110\u001b[0m         \u001b[0mfilename\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexpanduser\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 111\u001b[1;33m         \u001b[1;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"rb\"\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    112\u001b[0m             \u001b[0mpeek\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpeeksz\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    113\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mpeek\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34mb\"PK\\x03\\x04\"\u001b[0m\u001b[1;33m:\u001b[0m \u001b[1;31m# a ZIP file\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'D:/cns/navi-master/navi/schedule/schedule_N-05_structure_C-updated_I-062.xlsx'"
     ]
    }
   ],
   "source": [
    "schedule = pd.read_excel('D:/cns/navi-master/navi/schedule/schedule_N-05_structure_C-updated_I-062.xlsx')\n",
    "schedule\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### checking activity & dist "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'S10010'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "productivity_updated_schedule.iloc[3][0]#첫날의 작업 중 첫번째다 치고\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "check_pre_dist_act = productivity_updated_schedule.iloc[3][0]\n",
    "checked_dist = activity_pre_dist_dic[check_pre_dist_act] #첫날 첫번째 작업의 선행완료거리값\n",
    "print(checked_dist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### grid & activity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'3_2_2': 'S10010', '3_3_2': 'S10010', '2_3_2': 'S10010', '3_1_2': 'S10010', '2_2_2': 'S10010'}\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# productivity_updated_schedule.columns[0]\n",
    "#grid_a = productivity_updated_schedule.iloc[3,0] #작업이 있는 첫 그리드를 찾아다 치고\n",
    "#print(grid_a)\n",
    "\n",
    "\n",
    "#작업을 가진 그리드 딕셔너리 생성 필요할지는 모르겠음.(현재는 동일 작업으로 함)\n",
    "act_grids ={}\n",
    "for grid, activity in productivity_updated_schedule.iterrows():\n",
    "#     print(activity[\"Unnamed: 0\"]) # grid\n",
    "#     print(activity[0]) #index\n",
    "#     print(grid) #index\n",
    "    grid_list_w_act = {}\n",
    "    if activity[0] == check_pre_dist_act: #확인된 작업과 동일한 그리드\n",
    "#         print(activity[\"Unnamed: 0\"])     #확인된 작업과 동일한 그리드 출력\n",
    "        act_grids[activity[\"Unnamed: 0\"]] = activity[0] #확인된 작업과 동일한 그리드 딕셔너리 생성\n",
    "\n",
    "print(act_grids)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###   finding grids inside influence of act"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6, 5, 4, 1, 2, 3]\n",
      "[6, 5, 4, 1, 2, 3]\n",
      "[5, 4, 3, 1, 2]\n",
      "[6, 5, 4, 1, 2, 3]\n",
      "[5, 4, 3, 1, 2]\n"
     ]
    }
   ],
   "source": [
    "# checked_dist값 사용\n",
    "#print(checked_dist)\n",
    "#x 영향범위\n",
    "for grid, activity in act_grids.items():\n",
    "    x, y, z = grid.split(\"_\")\n",
    "    pre_dist1 = checked_dist\n",
    "    pre_dist2 = checked_dist\n",
    "    x=int(x)\n",
    "    pre_dist_location_x_list=[]\n",
    "    while pre_dist1 > 0:\n",
    "        pred_dist_x1 = x + pre_dist1\n",
    "#         print(pred_dist_x)\n",
    "        pre_dist_location_x_list.append(pred_dist_x1)\n",
    "        pre_dist1 = pre_dist1 - 1\n",
    "\n",
    "    while pre_dist2 >= 0:\n",
    "        pred_dist_x2 = x - pre_dist2\n",
    "#         print(pred_dist_x)\n",
    "        if pred_dist_x2 > 0:\n",
    "            pre_dist_location_x_list.append(pred_dist_x2)\n",
    "        pre_dist2 = pre_dist2 - 1\n",
    "        \n",
    "    print(pre_dist_location_x_list)\n",
    "        \n",
    "# print(pre_dist_location_x_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5, 4, 3, 1, 2]\n",
      "[6, 5, 4, 1, 2, 3]\n",
      "[6, 5, 4, 1, 2, 3]\n",
      "[4, 3, 2, 1]\n",
      "[5, 4, 3, 1, 2]\n"
     ]
    }
   ],
   "source": [
    "# checked_dist값 사용\n",
    "#print(checked_dist)\n",
    "#y 영향범위 \n",
    "for grid, activity in act_grids.items():\n",
    "    x, y, z = grid.split(\"_\")\n",
    "    pre_dist1 = checked_dist\n",
    "    pre_dist2 = checked_dist\n",
    "    y=int(y)\n",
    "    pre_dist_location_y_list=[]\n",
    "    while pre_dist1 > 0:\n",
    "        pred_dist_y1 = y + pre_dist1\n",
    "#         print(pred_dist_y)\n",
    "        pre_dist_location_y_list.append(pred_dist_y1)\n",
    "        pre_dist1 = pre_dist1 - 1\n",
    "\n",
    "    while pre_dist2 >= 0:\n",
    "        pred_dist_y2 = y - pre_dist2\n",
    "#         print(pred_dist_y)\n",
    "        if pred_dist_y2 > 0:\n",
    "            pre_dist_location_y_list.append(pred_dist_y2)\n",
    "        pre_dist2 = pre_dist2 - 1\n",
    "        \n",
    "    print(pre_dist_location_y_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 1]\n",
      "[2, 1]\n",
      "[2, 1]\n",
      "[2, 1]\n",
      "[2, 1]\n"
     ]
    }
   ],
   "source": [
    "#print(checked_dist)\n",
    "act_checked = productivity_updated_schedule.iloc[3][0]\n",
    "#print(act_checked)\n",
    "\n",
    "#Activity code 맨 앞문자\n",
    "#print(checked_dist)\n",
    "#z 영향범위\n",
    "\n",
    "for grid, activity in act_grids.items():\n",
    "    x, y, z = grid.split(\"_\")\n",
    "    pre_dist1 = 1\n",
    "    pre_dist2 = int(-1)\n",
    "    z = int(z)\n",
    "    pre_dist_location_z_list=[z]\n",
    "    if 'D' in act_checked:\n",
    "        pred_dist_z = z + pre_dist1\n",
    "        pre_dist_location_z_list.append(pred_dist_z)\n",
    "    elif 'S' in act_checked:\n",
    "        pred_dist_z = z + pre_dist2\n",
    "        pre_dist_location_z_list.append(pred_dist_z)\n",
    "        \n",
    "    print(pre_dist_location_z_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### making influence grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['5_5_2', '5_5_1', '5_4_2', '5_4_1', '5_3_2', '5_3_1', '5_1_2', '5_1_1', '5_2_2', '5_2_1', '4_5_2', '4_5_1', '4_4_2', '4_4_1', '4_3_2', '4_3_1', '4_1_2', '4_1_1', '4_2_2', '4_2_1', '3_5_2', '3_5_1', '3_4_2', '3_4_1', '3_3_2', '3_3_1', '3_1_2', '3_1_1', '3_2_2', '3_2_1', '1_5_2', '1_5_1', '1_4_2', '1_4_1', '1_3_2', '1_3_1', '1_1_2', '1_1_1', '1_2_2', '1_2_1', '2_5_2', '2_5_1', '2_4_2', '2_4_1', '2_3_2', '2_3_1', '2_1_2', '2_1_1', '2_2_2', '2_2_1']\n"
     ]
    }
   ],
   "source": [
    "influence_grids=[]\n",
    "for x in pre_dist_location_x_list:\n",
    "    x=str(x)\n",
    "    for y in pre_dist_location_y_list:\n",
    "        y=str(y)\n",
    "        for z in pre_dist_location_z_list:\n",
    "            z=str(z)\n",
    "            influence_x_y_z = []\n",
    "            influence_x_y_z.append(x)\n",
    "            influence_x_y_z.append(y)\n",
    "            influence_x_y_z.append(z)\n",
    "            influence_grid = '_'.join(influence_x_y_z)            \n",
    "            influence_grids.append(influence_grid)            \n",
    "\n",
    "print(influence_grids)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['5_5_2', '5_5_1', '5_4_2', '5_4_1', '5_3_2', '5_3_1', '5_1_2', '5_1_1', '5_2_2', '5_2_1', '4_5_2', '4_5_1', '4_4_2', '4_4_1', '4_3_2', '4_3_1', '4_1_2', '4_1_1', '4_2_2', '4_2_1', '3_5_2', '3_5_1', '3_4_2', '3_4_1', '3_3_1', '3_1_1', '3_2_1', '1_5_2', '1_5_1', '1_4_2', '1_4_1', '1_3_2', '1_3_1', '1_1_2', '1_1_1', '1_2_2', '1_2_1', '2_5_2', '2_5_1', '2_4_2', '2_4_1', '2_3_1', '2_1_2', '2_1_1', '2_2_1']\n"
     ]
    }
   ],
   "source": [
    "# 자신의 그리드 제거\n",
    "for grid_except, activity in act_grids.items():\n",
    "    while grid_except in influence_grids:\n",
    "        influence_grids.remove(grid_except)\n",
    "        \n",
    "print(influence_grids)git "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### activity in influence grids "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def make_pre_dist_activity_list(updated_schedule, pre_dist_location_list):    \n",
    "# 그리드 리스트에 배정되어 있는 Activity 리스트를 만든다.\n",
    "    return pre_dist_activity_list\n",
    "\n",
    "def check_pre_dist_activity_list(location, pre_dist_activity_list):    \n",
    "# 그리드 리스트에 배정된 Activity 리스트와 기준 그리드의 작업과 선후비교한다.\n",
    "# 특정 그리드(예, 2_2_1)에 배정된 작업과 선행작업 여부 검토\n",
    "# 선행작업 있으면 작업을 민다\n",
    "\n",
    "    if 리스트에 선행작업이 있으면 : \n",
    "        일정을 민다\n",
    "    else : \n",
    "        일정을 유지한다. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for key, value in productivity_schedule.iloc[0]:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "activity_pre_dist_dic['W11040']\n",
    "activity_pre_dist_dic['W10030']\n",
    "\n",
    "def act_pred_dist(activity_code):\n",
    "    predecessor_dist = activity_pre_dist_dic[activity_code]\n",
    "    return predecessor_dist\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def act_pred_dist(activity_code):\n",
    "     return predecessor_dist\n",
    "\n",
    "    for _, line in activity_pre_dist.iterrows(): #이해안됨 def set_navisystem(): 참조함.\n",
    "        code = line['code']\n",
    "        predecessor_dist = line['predecessor_dist']\n",
    "        parameters = {\n",
    "            'code':code\n",
    "            'predecessor_dist':predecessor_dist\n",
    "        activities[code] = Activity(parameters=parameters)\n",
    "#        .....\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "pre_dist_cal_dic = {}\n",
    "for _, line,  in dist_cal.iterrows():\n",
    "#   print(line[])\n",
    "    \n",
    "    print(_)\n",
    "    print(line[0])\n",
    "#  activity_pre_dist_dic[line['code']] = line['predecessor_dist']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pre_dist_location_x_list"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
